// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: api/grpc/protobuf/service_1/service_1.proto

package service_1

import (
	context "context"
	v1 "github.com/DoktorGhost/reflection/src/go/pkg/grpc/data/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OneService_GetOther_FullMethodName = "/combo.OneService/GetOther"
)

// OneServiceClient is the client API for OneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneServiceClient interface {
	GetOther(ctx context.Context, in *v1.DataOneRequest, opts ...grpc.CallOption) (*v1.DataOneResponse, error)
}

type oneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOneServiceClient(cc grpc.ClientConnInterface) OneServiceClient {
	return &oneServiceClient{cc}
}

func (c *oneServiceClient) GetOther(ctx context.Context, in *v1.DataOneRequest, opts ...grpc.CallOption) (*v1.DataOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DataOneResponse)
	err := c.cc.Invoke(ctx, OneService_GetOther_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneServiceServer is the server API for OneService service.
// All implementations must embed UnimplementedOneServiceServer
// for forward compatibility
type OneServiceServer interface {
	GetOther(context.Context, *v1.DataOneRequest) (*v1.DataOneResponse, error)
	mustEmbedUnimplementedOneServiceServer()
}

// UnimplementedOneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOneServiceServer struct {
}

func (UnimplementedOneServiceServer) GetOther(context.Context, *v1.DataOneRequest) (*v1.DataOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOther not implemented")
}
func (UnimplementedOneServiceServer) mustEmbedUnimplementedOneServiceServer() {}

// UnsafeOneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneServiceServer will
// result in compilation errors.
type UnsafeOneServiceServer interface {
	mustEmbedUnimplementedOneServiceServer()
}

func RegisterOneServiceServer(s grpc.ServiceRegistrar, srv OneServiceServer) {
	s.RegisterService(&OneService_ServiceDesc, srv)
}

func _OneService_GetOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DataOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneServiceServer).GetOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneService_GetOther_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneServiceServer).GetOther(ctx, req.(*v1.DataOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OneService_ServiceDesc is the grpc.ServiceDesc for OneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "combo.OneService",
	HandlerType: (*OneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOther",
			Handler:    _OneService_GetOther_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/protobuf/service_1/service_1.proto",
}

const (
	TwoService_GetOther_FullMethodName = "/combo.TwoService/GetOther"
)

// TwoServiceClient is the client API for TwoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoServiceClient interface {
	GetOther(ctx context.Context, in *v1.DataTwoRequest, opts ...grpc.CallOption) (*v1.DataTwoResponse, error)
}

type twoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoServiceClient(cc grpc.ClientConnInterface) TwoServiceClient {
	return &twoServiceClient{cc}
}

func (c *twoServiceClient) GetOther(ctx context.Context, in *v1.DataTwoRequest, opts ...grpc.CallOption) (*v1.DataTwoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DataTwoResponse)
	err := c.cc.Invoke(ctx, TwoService_GetOther_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoServiceServer is the server API for TwoService service.
// All implementations must embed UnimplementedTwoServiceServer
// for forward compatibility
type TwoServiceServer interface {
	GetOther(context.Context, *v1.DataTwoRequest) (*v1.DataTwoResponse, error)
	mustEmbedUnimplementedTwoServiceServer()
}

// UnimplementedTwoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTwoServiceServer struct {
}

func (UnimplementedTwoServiceServer) GetOther(context.Context, *v1.DataTwoRequest) (*v1.DataTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOther not implemented")
}
func (UnimplementedTwoServiceServer) mustEmbedUnimplementedTwoServiceServer() {}

// UnsafeTwoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoServiceServer will
// result in compilation errors.
type UnsafeTwoServiceServer interface {
	mustEmbedUnimplementedTwoServiceServer()
}

func RegisterTwoServiceServer(s grpc.ServiceRegistrar, srv TwoServiceServer) {
	s.RegisterService(&TwoService_ServiceDesc, srv)
}

func _TwoService_GetOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DataTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoServiceServer).GetOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoService_GetOther_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoServiceServer).GetOther(ctx, req.(*v1.DataTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoService_ServiceDesc is the grpc.ServiceDesc for TwoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "combo.TwoService",
	HandlerType: (*TwoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOther",
			Handler:    _TwoService_GetOther_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/protobuf/service_1/service_1.proto",
}

const (
	ThreeService_GetOther_FullMethodName = "/combo.ThreeService/GetOther"
)

// ThreeServiceClient is the client API for ThreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreeServiceClient interface {
	GetOther(ctx context.Context, in *v1.DataThreeRequest, opts ...grpc.CallOption) (*v1.DataThreeResponse, error)
}

type threeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThreeServiceClient(cc grpc.ClientConnInterface) ThreeServiceClient {
	return &threeServiceClient{cc}
}

func (c *threeServiceClient) GetOther(ctx context.Context, in *v1.DataThreeRequest, opts ...grpc.CallOption) (*v1.DataThreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DataThreeResponse)
	err := c.cc.Invoke(ctx, ThreeService_GetOther_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreeServiceServer is the server API for ThreeService service.
// All implementations must embed UnimplementedThreeServiceServer
// for forward compatibility
type ThreeServiceServer interface {
	GetOther(context.Context, *v1.DataThreeRequest) (*v1.DataThreeResponse, error)
	mustEmbedUnimplementedThreeServiceServer()
}

// UnimplementedThreeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThreeServiceServer struct {
}

func (UnimplementedThreeServiceServer) GetOther(context.Context, *v1.DataThreeRequest) (*v1.DataThreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOther not implemented")
}
func (UnimplementedThreeServiceServer) mustEmbedUnimplementedThreeServiceServer() {}

// UnsafeThreeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreeServiceServer will
// result in compilation errors.
type UnsafeThreeServiceServer interface {
	mustEmbedUnimplementedThreeServiceServer()
}

func RegisterThreeServiceServer(s grpc.ServiceRegistrar, srv ThreeServiceServer) {
	s.RegisterService(&ThreeService_ServiceDesc, srv)
}

func _ThreeService_GetOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DataThreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreeServiceServer).GetOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreeService_GetOther_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreeServiceServer).GetOther(ctx, req.(*v1.DataThreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThreeService_ServiceDesc is the grpc.ServiceDesc for ThreeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "combo.ThreeService",
	HandlerType: (*ThreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOther",
			Handler:    _ThreeService_GetOther_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/protobuf/service_1/service_1.proto",
}
